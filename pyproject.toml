[project]
name = "rustedpy-maybe"
version = "0.0.0"
description = "A Rust-like option type for Python"
readme = "README.md"
requires-python = ">=3.8, <=3.12"
keywords = ["rust", "option", "maybe", "enum"]
authors = [
    {name = "francium", email = "francium@francium.cc"}
]
maintainers = [
    {name = "rustedpy github org members"}
]
license = {file = "LICENSE"}
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only"
]


dependencies = []

[project.optional-dependencies]
result = ["result"]


[dependency-groups]
dev = [
    "build>=1.2.2.post1",
    "flake8>=5.0.4",
    "lazydocs>=0.4.8",
    "mypy>=1.13.0",
    "pytest-asyncio>=0.24.0",
    "pytest>=8.3.4",
    "pytest-cov>=5.0.0",
    "pytest-mypy-plugins>=3.1.2",
    "twine>=6.0.1",
    "result>=0.17.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/maybe"]

[tool.mypy]
python_version = "3.11"
files = ["src", "tests"]
# Exclude files with pattern matching syntax until we drop support for Python
# versions that don't support pattern matching. Trying to use with an older
# Python version results in a "invalid syntax" error from mypy
exclude = "tests/test_pattern_matching.py"
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.coverage.run]
# Ignore "Couldn't parse Python file" warnings produced when attempting to parse
# Python 3.10+ code using an earlier version of Python.
disable_warnings = ["couldnt-parse"]

[tool.pytest.ini_options]
addopts = [
  "--tb=short",
  "--cov=src",
  "--cov-report=term-missing",
  "--cov-report=xml",

  # By default, ignore tests that only run on Python 3.10+
  "--ignore=tests/test_pattern_matching.py",
]
[tool.ruff.lint]
select = ["ALL"]
exclude = ["alembic/versions/*"]
ignore = ["TID252", "E501", "S101", "S102", "S104", "S324", "EXE002", "D100", "D102","D200","D401", "D203","D415","D400","D205", "D206", "D103", "D104", "D105", "D106", "D101", "D107", "D212", "D211", "PGH003", "PGH004", "N811", "N804", "N818", "N806", "N815", "ARG001", "ARG002", "DTZ003", "DTZ005", "RSE102", "SLF001", "PLR", "INP", "TRY", "SIM300", "SIM114", "DJ008", "FIX002", "S603", "S607", "TD002", "TD003", "W191", "COM812", "ISC001"]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["input", "filter", "id"]

[tool.ruff.lint.isort]
combine-as-imports = true   

